//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  about: About;
  aboutConnection: AboutConnection;
  blog: Blog;
  blogConnection: BlogConnection;
  realtime: Realtime;
  realtimeConnection: RealtimeConnection;
  page: Page;
  pageConnection: PageConnection;
  post: Post;
  postConnection: PostConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryAboutArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryAboutConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<AboutFilter>;
};


export type QueryBlogArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryBlogConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<BlogFilter>;
};


export type QueryRealtimeArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryRealtimeConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<RealtimeFilter>;
};


export type QueryPageArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPageConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PageFilter>;
};


export type QueryPostArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPostConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PostFilter>;
};

export type DocumentFilter = {
  about?: InputMaybe<AboutFilter>;
  blog?: InputMaybe<BlogFilter>;
  realtime?: InputMaybe<RealtimeFilter>;
  page?: InputMaybe<PageFilter>;
  post?: InputMaybe<PostFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = About | Blog | Realtime | Page | Post | Folder;

export type AboutHeader = {
  __typename?: 'AboutHeader';
  image?: Maybe<Scalars['String']['output']>;
  label1?: Maybe<Scalars['String']['output']>;
  label2?: Maybe<Scalars['String']['output']>;
  label3?: Maybe<Scalars['String']['output']>;
  label4?: Maybe<Scalars['String']['output']>;
  label5?: Maybe<Scalars['String']['output']>;
  label6?: Maybe<Scalars['String']['output']>;
  label7?: Maybe<Scalars['String']['output']>;
  button?: Maybe<Scalars['String']['output']>;
};

export type AboutHeroText = {
  __typename?: 'AboutHeroText';
  bannerTitle?: Maybe<Scalars['String']['output']>;
  bannerSpanTitle?: Maybe<Scalars['String']['output']>;
  bannerContent?: Maybe<Scalars['String']['output']>;
};

export type AboutDisplayinsights = {
  __typename?: 'AboutDisplayinsights';
  Headingone?: Maybe<Scalars['String']['output']>;
  Headingtwo?: Maybe<Scalars['String']['output']>;
  insight?: Maybe<Scalars['String']['output']>;
};

export type About = Node & Document & {
  __typename?: 'About';
  header?: Maybe<AboutHeader>;
  heroText?: Maybe<AboutHeroText>;
  displayinsights?: Maybe<AboutDisplayinsights>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type AboutHeaderFilter = {
  image?: InputMaybe<ImageFilter>;
  label1?: InputMaybe<StringFilter>;
  label2?: InputMaybe<StringFilter>;
  label3?: InputMaybe<StringFilter>;
  label4?: InputMaybe<StringFilter>;
  label5?: InputMaybe<StringFilter>;
  label6?: InputMaybe<StringFilter>;
  label7?: InputMaybe<StringFilter>;
  button?: InputMaybe<StringFilter>;
};

export type AboutHeroTextFilter = {
  bannerTitle?: InputMaybe<StringFilter>;
  bannerSpanTitle?: InputMaybe<StringFilter>;
  bannerContent?: InputMaybe<StringFilter>;
};

export type AboutDisplayinsightsFilter = {
  Headingone?: InputMaybe<StringFilter>;
  Headingtwo?: InputMaybe<StringFilter>;
  insight?: InputMaybe<StringFilter>;
};

export type AboutFilter = {
  header?: InputMaybe<AboutHeaderFilter>;
  heroText?: InputMaybe<AboutHeroTextFilter>;
  displayinsights?: InputMaybe<AboutDisplayinsightsFilter>;
};

export type AboutConnectionEdges = {
  __typename?: 'AboutConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<About>;
};

export type AboutConnection = Connection & {
  __typename?: 'AboutConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<AboutConnectionEdges>>>;
};

export type BlogHeader = {
  __typename?: 'BlogHeader';
  image?: Maybe<Scalars['String']['output']>;
  label1?: Maybe<Scalars['String']['output']>;
  label2?: Maybe<Scalars['String']['output']>;
  label3?: Maybe<Scalars['String']['output']>;
  label4?: Maybe<Scalars['String']['output']>;
  label5?: Maybe<Scalars['String']['output']>;
  label6?: Maybe<Scalars['String']['output']>;
  label7?: Maybe<Scalars['String']['output']>;
  button?: Maybe<Scalars['String']['output']>;
};

export type BlogHeroText = {
  __typename?: 'BlogHeroText';
  bannerTitle?: Maybe<Scalars['String']['output']>;
  bannerSpanTitle?: Maybe<Scalars['String']['output']>;
  bannerContent?: Maybe<Scalars['String']['output']>;
  bannerButtonText1?: Maybe<Scalars['String']['output']>;
  bannerButtonText2?: Maybe<Scalars['String']['output']>;
  bannerImage?: Maybe<Scalars['String']['output']>;
};

export type BlogHorizhover = {
  __typename?: 'BlogHorizhover';
  title?: Maybe<Scalars['String']['output']>;
  content?: Maybe<Scalars['String']['output']>;
  image1?: Maybe<Scalars['String']['output']>;
  title1?: Maybe<Scalars['String']['output']>;
  content1?: Maybe<Scalars['String']['output']>;
  image2?: Maybe<Scalars['String']['output']>;
  title2?: Maybe<Scalars['String']['output']>;
  content2?: Maybe<Scalars['String']['output']>;
};

export type BlogSectionThree = {
  __typename?: 'BlogSectionThree';
  digital?: Maybe<Scalars['String']['output']>;
  digitalspan?: Maybe<Scalars['String']['output']>;
  digitalcontent?: Maybe<Scalars['String']['output']>;
  title1?: Maybe<Scalars['String']['output']>;
  content1?: Maybe<Scalars['String']['output']>;
  title2?: Maybe<Scalars['String']['output']>;
  content2?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
};

export type BlogDisplayinsights = {
  __typename?: 'BlogDisplayinsights';
  Headingone?: Maybe<Scalars['String']['output']>;
  Headingtwo?: Maybe<Scalars['String']['output']>;
  insight?: Maybe<Scalars['String']['output']>;
};

export type Blog = Node & Document & {
  __typename?: 'Blog';
  header?: Maybe<BlogHeader>;
  heroText?: Maybe<BlogHeroText>;
  horizhover?: Maybe<BlogHorizhover>;
  sectionThree?: Maybe<BlogSectionThree>;
  displayinsights?: Maybe<BlogDisplayinsights>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type BlogHeaderFilter = {
  image?: InputMaybe<ImageFilter>;
  label1?: InputMaybe<StringFilter>;
  label2?: InputMaybe<StringFilter>;
  label3?: InputMaybe<StringFilter>;
  label4?: InputMaybe<StringFilter>;
  label5?: InputMaybe<StringFilter>;
  label6?: InputMaybe<StringFilter>;
  label7?: InputMaybe<StringFilter>;
  button?: InputMaybe<StringFilter>;
};

export type BlogHeroTextFilter = {
  bannerTitle?: InputMaybe<StringFilter>;
  bannerSpanTitle?: InputMaybe<StringFilter>;
  bannerContent?: InputMaybe<StringFilter>;
  bannerButtonText1?: InputMaybe<StringFilter>;
  bannerButtonText2?: InputMaybe<StringFilter>;
  bannerImage?: InputMaybe<ImageFilter>;
};

export type BlogHorizhoverFilter = {
  title?: InputMaybe<StringFilter>;
  content?: InputMaybe<StringFilter>;
  image1?: InputMaybe<ImageFilter>;
  title1?: InputMaybe<StringFilter>;
  content1?: InputMaybe<StringFilter>;
  image2?: InputMaybe<ImageFilter>;
  title2?: InputMaybe<StringFilter>;
  content2?: InputMaybe<StringFilter>;
};

export type BlogSectionThreeFilter = {
  digital?: InputMaybe<StringFilter>;
  digitalspan?: InputMaybe<StringFilter>;
  digitalcontent?: InputMaybe<StringFilter>;
  title1?: InputMaybe<StringFilter>;
  content1?: InputMaybe<StringFilter>;
  title2?: InputMaybe<StringFilter>;
  content2?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
};

export type BlogDisplayinsightsFilter = {
  Headingone?: InputMaybe<StringFilter>;
  Headingtwo?: InputMaybe<StringFilter>;
  insight?: InputMaybe<StringFilter>;
};

export type BlogFilter = {
  header?: InputMaybe<BlogHeaderFilter>;
  heroText?: InputMaybe<BlogHeroTextFilter>;
  horizhover?: InputMaybe<BlogHorizhoverFilter>;
  sectionThree?: InputMaybe<BlogSectionThreeFilter>;
  displayinsights?: InputMaybe<BlogDisplayinsightsFilter>;
};

export type BlogConnectionEdges = {
  __typename?: 'BlogConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Blog>;
};

export type BlogConnection = Connection & {
  __typename?: 'BlogConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<BlogConnectionEdges>>>;
};

export type RealtimeHeader = {
  __typename?: 'RealtimeHeader';
  image?: Maybe<Scalars['String']['output']>;
  label1?: Maybe<Scalars['String']['output']>;
  label2?: Maybe<Scalars['String']['output']>;
  label3?: Maybe<Scalars['String']['output']>;
  label4?: Maybe<Scalars['String']['output']>;
  label5?: Maybe<Scalars['String']['output']>;
  label6?: Maybe<Scalars['String']['output']>;
  label7?: Maybe<Scalars['String']['output']>;
  button?: Maybe<Scalars['String']['output']>;
};

export type RealtimeHeroText = {
  __typename?: 'RealtimeHeroText';
  bannerTitle?: Maybe<Scalars['String']['output']>;
  bannerSpanTitle?: Maybe<Scalars['String']['output']>;
  bannerContent?: Maybe<Scalars['String']['output']>;
  bannerButtonText1?: Maybe<Scalars['String']['output']>;
  bannerButtonText2?: Maybe<Scalars['String']['output']>;
  bannerImage?: Maybe<Scalars['String']['output']>;
};

export type RealtimeHorizhover = {
  __typename?: 'RealtimeHorizhover';
  title?: Maybe<Scalars['String']['output']>;
  content?: Maybe<Scalars['String']['output']>;
  image1?: Maybe<Scalars['String']['output']>;
  title1?: Maybe<Scalars['String']['output']>;
  content1?: Maybe<Scalars['String']['output']>;
  image2?: Maybe<Scalars['String']['output']>;
  title2?: Maybe<Scalars['String']['output']>;
  content2?: Maybe<Scalars['String']['output']>;
};

export type RealtimeSectionThree = {
  __typename?: 'RealtimeSectionThree';
  digital?: Maybe<Scalars['String']['output']>;
  digitalspan?: Maybe<Scalars['String']['output']>;
  digitalcontent?: Maybe<Scalars['String']['output']>;
  title1?: Maybe<Scalars['String']['output']>;
  content1?: Maybe<Scalars['String']['output']>;
  title2?: Maybe<Scalars['String']['output']>;
  content2?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
};

export type RealtimeDisplayinsights = {
  __typename?: 'RealtimeDisplayinsights';
  Headingone?: Maybe<Scalars['String']['output']>;
  Headingtwo?: Maybe<Scalars['String']['output']>;
  insight?: Maybe<Scalars['String']['output']>;
};

export type Realtime = Node & Document & {
  __typename?: 'Realtime';
  header?: Maybe<RealtimeHeader>;
  heroText?: Maybe<RealtimeHeroText>;
  horizhover?: Maybe<RealtimeHorizhover>;
  sectionThree?: Maybe<RealtimeSectionThree>;
  displayinsights?: Maybe<RealtimeDisplayinsights>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type RealtimeHeaderFilter = {
  image?: InputMaybe<ImageFilter>;
  label1?: InputMaybe<StringFilter>;
  label2?: InputMaybe<StringFilter>;
  label3?: InputMaybe<StringFilter>;
  label4?: InputMaybe<StringFilter>;
  label5?: InputMaybe<StringFilter>;
  label6?: InputMaybe<StringFilter>;
  label7?: InputMaybe<StringFilter>;
  button?: InputMaybe<StringFilter>;
};

export type RealtimeHeroTextFilter = {
  bannerTitle?: InputMaybe<StringFilter>;
  bannerSpanTitle?: InputMaybe<StringFilter>;
  bannerContent?: InputMaybe<StringFilter>;
  bannerButtonText1?: InputMaybe<StringFilter>;
  bannerButtonText2?: InputMaybe<StringFilter>;
  bannerImage?: InputMaybe<ImageFilter>;
};

export type RealtimeHorizhoverFilter = {
  title?: InputMaybe<StringFilter>;
  content?: InputMaybe<StringFilter>;
  image1?: InputMaybe<ImageFilter>;
  title1?: InputMaybe<StringFilter>;
  content1?: InputMaybe<StringFilter>;
  image2?: InputMaybe<ImageFilter>;
  title2?: InputMaybe<StringFilter>;
  content2?: InputMaybe<StringFilter>;
};

export type RealtimeSectionThreeFilter = {
  digital?: InputMaybe<StringFilter>;
  digitalspan?: InputMaybe<StringFilter>;
  digitalcontent?: InputMaybe<StringFilter>;
  title1?: InputMaybe<StringFilter>;
  content1?: InputMaybe<StringFilter>;
  title2?: InputMaybe<StringFilter>;
  content2?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
};

export type RealtimeDisplayinsightsFilter = {
  Headingone?: InputMaybe<StringFilter>;
  Headingtwo?: InputMaybe<StringFilter>;
  insight?: InputMaybe<StringFilter>;
};

export type RealtimeFilter = {
  header?: InputMaybe<RealtimeHeaderFilter>;
  heroText?: InputMaybe<RealtimeHeroTextFilter>;
  horizhover?: InputMaybe<RealtimeHorizhoverFilter>;
  sectionThree?: InputMaybe<RealtimeSectionThreeFilter>;
  displayinsights?: InputMaybe<RealtimeDisplayinsightsFilter>;
};

export type RealtimeConnectionEdges = {
  __typename?: 'RealtimeConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Realtime>;
};

export type RealtimeConnection = Connection & {
  __typename?: 'RealtimeConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<RealtimeConnectionEdges>>>;
};

export type PageBanner = {
  __typename?: 'PageBanner';
  bannerTitle?: Maybe<Scalars['String']['output']>;
  bannerSpanTitle?: Maybe<Scalars['String']['output']>;
  bannerSubTitle?: Maybe<Scalars['String']['output']>;
  bannerButtonText?: Maybe<Scalars['String']['output']>;
};

export type PageSectionOne = {
  __typename?: 'PageSectionOne';
  sectionOneText?: Maybe<Scalars['String']['output']>;
  sectionOneImage?: Maybe<Scalars['String']['output']>;
};

export type PageSectionTwo = {
  __typename?: 'PageSectionTwo';
  TableHead1?: Maybe<Scalars['String']['output']>;
  TableHead2?: Maybe<Scalars['String']['output']>;
  TableHead3?: Maybe<Scalars['String']['output']>;
  TableHead4?: Maybe<Scalars['String']['output']>;
  TableBody1?: Maybe<Scalars['String']['output']>;
  TableBody2?: Maybe<Scalars['String']['output']>;
  TableBody3?: Maybe<Scalars['String']['output']>;
  TableBody4?: Maybe<Scalars['String']['output']>;
  TableImage1?: Maybe<Scalars['String']['output']>;
  TableImage2?: Maybe<Scalars['String']['output']>;
  TableImage3?: Maybe<Scalars['String']['output']>;
  TableImage4?: Maybe<Scalars['String']['output']>;
  TableImageAlt?: Maybe<Scalars['String']['output']>;
};

export type PageSectionThreeText = {
  __typename?: 'PageSectionThreeText';
  Heading?: Maybe<Scalars['String']['output']>;
  Content?: Maybe<Scalars['String']['output']>;
  Button?: Maybe<Scalars['String']['output']>;
};

export type PageSectionFourTextHoverList = {
  __typename?: 'PageSectionFourTextHoverList';
  Heading1?: Maybe<Scalars['String']['output']>;
  Content1?: Maybe<Scalars['String']['output']>;
  Heading2?: Maybe<Scalars['String']['output']>;
  Content2?: Maybe<Scalars['String']['output']>;
  Heading3?: Maybe<Scalars['String']['output']>;
  Content3?: Maybe<Scalars['String']['output']>;
};

export type PageSectionFourText = {
  __typename?: 'PageSectionFourText';
  HeadingI?: Maybe<Scalars['String']['output']>;
  HeadingII?: Maybe<Scalars['String']['output']>;
  HeadingIII?: Maybe<Scalars['String']['output']>;
  ImageTopText?: Maybe<Scalars['String']['output']>;
  Image?: Maybe<Scalars['String']['output']>;
  HoverList?: Maybe<PageSectionFourTextHoverList>;
};

export type Page = Node & Document & {
  __typename?: 'Page';
  banner?: Maybe<PageBanner>;
  sectionOne?: Maybe<PageSectionOne>;
  sectionTwo?: Maybe<PageSectionTwo>;
  sectionThreeText?: Maybe<PageSectionThreeText>;
  sectionFourText?: Maybe<PageSectionFourText>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type PageBannerFilter = {
  bannerTitle?: InputMaybe<StringFilter>;
  bannerSpanTitle?: InputMaybe<StringFilter>;
  bannerSubTitle?: InputMaybe<StringFilter>;
  bannerButtonText?: InputMaybe<StringFilter>;
};

export type PageSectionOneFilter = {
  sectionOneText?: InputMaybe<StringFilter>;
  sectionOneImage?: InputMaybe<ImageFilter>;
};

export type PageSectionTwoFilter = {
  TableHead1?: InputMaybe<StringFilter>;
  TableHead2?: InputMaybe<StringFilter>;
  TableHead3?: InputMaybe<StringFilter>;
  TableHead4?: InputMaybe<StringFilter>;
  TableBody1?: InputMaybe<StringFilter>;
  TableBody2?: InputMaybe<StringFilter>;
  TableBody3?: InputMaybe<StringFilter>;
  TableBody4?: InputMaybe<StringFilter>;
  TableImage1?: InputMaybe<ImageFilter>;
  TableImage2?: InputMaybe<ImageFilter>;
  TableImage3?: InputMaybe<ImageFilter>;
  TableImage4?: InputMaybe<ImageFilter>;
  TableImageAlt?: InputMaybe<StringFilter>;
};

export type PageSectionThreeTextFilter = {
  Heading?: InputMaybe<StringFilter>;
  Content?: InputMaybe<StringFilter>;
  Button?: InputMaybe<StringFilter>;
};

export type PageSectionFourTextHoverListFilter = {
  Heading1?: InputMaybe<StringFilter>;
  Content1?: InputMaybe<StringFilter>;
  Heading2?: InputMaybe<StringFilter>;
  Content2?: InputMaybe<StringFilter>;
  Heading3?: InputMaybe<StringFilter>;
  Content3?: InputMaybe<StringFilter>;
};

export type PageSectionFourTextFilter = {
  HeadingI?: InputMaybe<StringFilter>;
  HeadingII?: InputMaybe<StringFilter>;
  HeadingIII?: InputMaybe<StringFilter>;
  ImageTopText?: InputMaybe<StringFilter>;
  Image?: InputMaybe<ImageFilter>;
  HoverList?: InputMaybe<PageSectionFourTextHoverListFilter>;
};

export type PageFilter = {
  banner?: InputMaybe<PageBannerFilter>;
  sectionOne?: InputMaybe<PageSectionOneFilter>;
  sectionTwo?: InputMaybe<PageSectionTwoFilter>;
  sectionThreeText?: InputMaybe<PageSectionThreeTextFilter>;
  sectionFourText?: InputMaybe<PageSectionFourTextFilter>;
};

export type PageConnectionEdges = {
  __typename?: 'PageConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Page>;
};

export type PageConnection = Connection & {
  __typename?: 'PageConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<PageConnectionEdges>>>;
};

export type Post = Node & Document & {
  __typename?: 'Post';
  title: Scalars['String']['output'];
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type PostFilter = {
  title?: InputMaybe<StringFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type PostConnectionEdges = {
  __typename?: 'PostConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Post>;
};

export type PostConnection = Connection & {
  __typename?: 'PostConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<PostConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  createFolder: DocumentNode;
  updateAbout: About;
  createAbout: About;
  updateBlog: Blog;
  createBlog: Blog;
  updateRealtime: Realtime;
  createRealtime: Realtime;
  updatePage: Page;
  createPage: Page;
  updatePost: Post;
  createPost: Post;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationCreateFolderArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationUpdateAboutArgs = {
  relativePath: Scalars['String']['input'];
  params: AboutMutation;
};


export type MutationCreateAboutArgs = {
  relativePath: Scalars['String']['input'];
  params: AboutMutation;
};


export type MutationUpdateBlogArgs = {
  relativePath: Scalars['String']['input'];
  params: BlogMutation;
};


export type MutationCreateBlogArgs = {
  relativePath: Scalars['String']['input'];
  params: BlogMutation;
};


export type MutationUpdateRealtimeArgs = {
  relativePath: Scalars['String']['input'];
  params: RealtimeMutation;
};


export type MutationCreateRealtimeArgs = {
  relativePath: Scalars['String']['input'];
  params: RealtimeMutation;
};


export type MutationUpdatePageArgs = {
  relativePath: Scalars['String']['input'];
  params: PageMutation;
};


export type MutationCreatePageArgs = {
  relativePath: Scalars['String']['input'];
  params: PageMutation;
};


export type MutationUpdatePostArgs = {
  relativePath: Scalars['String']['input'];
  params: PostMutation;
};


export type MutationCreatePostArgs = {
  relativePath: Scalars['String']['input'];
  params: PostMutation;
};

export type DocumentUpdateMutation = {
  about?: InputMaybe<AboutMutation>;
  blog?: InputMaybe<BlogMutation>;
  realtime?: InputMaybe<RealtimeMutation>;
  page?: InputMaybe<PageMutation>;
  post?: InputMaybe<PostMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  about?: InputMaybe<AboutMutation>;
  blog?: InputMaybe<BlogMutation>;
  realtime?: InputMaybe<RealtimeMutation>;
  page?: InputMaybe<PageMutation>;
  post?: InputMaybe<PostMutation>;
};

export type AboutHeaderMutation = {
  image?: InputMaybe<Scalars['String']['input']>;
  label1?: InputMaybe<Scalars['String']['input']>;
  label2?: InputMaybe<Scalars['String']['input']>;
  label3?: InputMaybe<Scalars['String']['input']>;
  label4?: InputMaybe<Scalars['String']['input']>;
  label5?: InputMaybe<Scalars['String']['input']>;
  label6?: InputMaybe<Scalars['String']['input']>;
  label7?: InputMaybe<Scalars['String']['input']>;
  button?: InputMaybe<Scalars['String']['input']>;
};

export type AboutHeroTextMutation = {
  bannerTitle?: InputMaybe<Scalars['String']['input']>;
  bannerSpanTitle?: InputMaybe<Scalars['String']['input']>;
  bannerContent?: InputMaybe<Scalars['String']['input']>;
};

export type AboutDisplayinsightsMutation = {
  Headingone?: InputMaybe<Scalars['String']['input']>;
  Headingtwo?: InputMaybe<Scalars['String']['input']>;
  insight?: InputMaybe<Scalars['String']['input']>;
};

export type AboutMutation = {
  header?: InputMaybe<AboutHeaderMutation>;
  heroText?: InputMaybe<AboutHeroTextMutation>;
  displayinsights?: InputMaybe<AboutDisplayinsightsMutation>;
};

export type BlogHeaderMutation = {
  image?: InputMaybe<Scalars['String']['input']>;
  label1?: InputMaybe<Scalars['String']['input']>;
  label2?: InputMaybe<Scalars['String']['input']>;
  label3?: InputMaybe<Scalars['String']['input']>;
  label4?: InputMaybe<Scalars['String']['input']>;
  label5?: InputMaybe<Scalars['String']['input']>;
  label6?: InputMaybe<Scalars['String']['input']>;
  label7?: InputMaybe<Scalars['String']['input']>;
  button?: InputMaybe<Scalars['String']['input']>;
};

export type BlogHeroTextMutation = {
  bannerTitle?: InputMaybe<Scalars['String']['input']>;
  bannerSpanTitle?: InputMaybe<Scalars['String']['input']>;
  bannerContent?: InputMaybe<Scalars['String']['input']>;
  bannerButtonText1?: InputMaybe<Scalars['String']['input']>;
  bannerButtonText2?: InputMaybe<Scalars['String']['input']>;
  bannerImage?: InputMaybe<Scalars['String']['input']>;
};

export type BlogHorizhoverMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  content?: InputMaybe<Scalars['String']['input']>;
  image1?: InputMaybe<Scalars['String']['input']>;
  title1?: InputMaybe<Scalars['String']['input']>;
  content1?: InputMaybe<Scalars['String']['input']>;
  image2?: InputMaybe<Scalars['String']['input']>;
  title2?: InputMaybe<Scalars['String']['input']>;
  content2?: InputMaybe<Scalars['String']['input']>;
};

export type BlogSectionThreeMutation = {
  digital?: InputMaybe<Scalars['String']['input']>;
  digitalspan?: InputMaybe<Scalars['String']['input']>;
  digitalcontent?: InputMaybe<Scalars['String']['input']>;
  title1?: InputMaybe<Scalars['String']['input']>;
  content1?: InputMaybe<Scalars['String']['input']>;
  title2?: InputMaybe<Scalars['String']['input']>;
  content2?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
};

export type BlogDisplayinsightsMutation = {
  Headingone?: InputMaybe<Scalars['String']['input']>;
  Headingtwo?: InputMaybe<Scalars['String']['input']>;
  insight?: InputMaybe<Scalars['String']['input']>;
};

export type BlogMutation = {
  header?: InputMaybe<BlogHeaderMutation>;
  heroText?: InputMaybe<BlogHeroTextMutation>;
  horizhover?: InputMaybe<BlogHorizhoverMutation>;
  sectionThree?: InputMaybe<BlogSectionThreeMutation>;
  displayinsights?: InputMaybe<BlogDisplayinsightsMutation>;
};

export type RealtimeHeaderMutation = {
  image?: InputMaybe<Scalars['String']['input']>;
  label1?: InputMaybe<Scalars['String']['input']>;
  label2?: InputMaybe<Scalars['String']['input']>;
  label3?: InputMaybe<Scalars['String']['input']>;
  label4?: InputMaybe<Scalars['String']['input']>;
  label5?: InputMaybe<Scalars['String']['input']>;
  label6?: InputMaybe<Scalars['String']['input']>;
  label7?: InputMaybe<Scalars['String']['input']>;
  button?: InputMaybe<Scalars['String']['input']>;
};

export type RealtimeHeroTextMutation = {
  bannerTitle?: InputMaybe<Scalars['String']['input']>;
  bannerSpanTitle?: InputMaybe<Scalars['String']['input']>;
  bannerContent?: InputMaybe<Scalars['String']['input']>;
  bannerButtonText1?: InputMaybe<Scalars['String']['input']>;
  bannerButtonText2?: InputMaybe<Scalars['String']['input']>;
  bannerImage?: InputMaybe<Scalars['String']['input']>;
};

export type RealtimeHorizhoverMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  content?: InputMaybe<Scalars['String']['input']>;
  image1?: InputMaybe<Scalars['String']['input']>;
  title1?: InputMaybe<Scalars['String']['input']>;
  content1?: InputMaybe<Scalars['String']['input']>;
  image2?: InputMaybe<Scalars['String']['input']>;
  title2?: InputMaybe<Scalars['String']['input']>;
  content2?: InputMaybe<Scalars['String']['input']>;
};

export type RealtimeSectionThreeMutation = {
  digital?: InputMaybe<Scalars['String']['input']>;
  digitalspan?: InputMaybe<Scalars['String']['input']>;
  digitalcontent?: InputMaybe<Scalars['String']['input']>;
  title1?: InputMaybe<Scalars['String']['input']>;
  content1?: InputMaybe<Scalars['String']['input']>;
  title2?: InputMaybe<Scalars['String']['input']>;
  content2?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
};

export type RealtimeDisplayinsightsMutation = {
  Headingone?: InputMaybe<Scalars['String']['input']>;
  Headingtwo?: InputMaybe<Scalars['String']['input']>;
  insight?: InputMaybe<Scalars['String']['input']>;
};

export type RealtimeMutation = {
  header?: InputMaybe<RealtimeHeaderMutation>;
  heroText?: InputMaybe<RealtimeHeroTextMutation>;
  horizhover?: InputMaybe<RealtimeHorizhoverMutation>;
  sectionThree?: InputMaybe<RealtimeSectionThreeMutation>;
  displayinsights?: InputMaybe<RealtimeDisplayinsightsMutation>;
};

export type PageBannerMutation = {
  bannerTitle?: InputMaybe<Scalars['String']['input']>;
  bannerSpanTitle?: InputMaybe<Scalars['String']['input']>;
  bannerSubTitle?: InputMaybe<Scalars['String']['input']>;
  bannerButtonText?: InputMaybe<Scalars['String']['input']>;
};

export type PageSectionOneMutation = {
  sectionOneText?: InputMaybe<Scalars['String']['input']>;
  sectionOneImage?: InputMaybe<Scalars['String']['input']>;
};

export type PageSectionTwoMutation = {
  TableHead1?: InputMaybe<Scalars['String']['input']>;
  TableHead2?: InputMaybe<Scalars['String']['input']>;
  TableHead3?: InputMaybe<Scalars['String']['input']>;
  TableHead4?: InputMaybe<Scalars['String']['input']>;
  TableBody1?: InputMaybe<Scalars['String']['input']>;
  TableBody2?: InputMaybe<Scalars['String']['input']>;
  TableBody3?: InputMaybe<Scalars['String']['input']>;
  TableBody4?: InputMaybe<Scalars['String']['input']>;
  TableImage1?: InputMaybe<Scalars['String']['input']>;
  TableImage2?: InputMaybe<Scalars['String']['input']>;
  TableImage3?: InputMaybe<Scalars['String']['input']>;
  TableImage4?: InputMaybe<Scalars['String']['input']>;
  TableImageAlt?: InputMaybe<Scalars['String']['input']>;
};

export type PageSectionThreeTextMutation = {
  Heading?: InputMaybe<Scalars['String']['input']>;
  Content?: InputMaybe<Scalars['String']['input']>;
  Button?: InputMaybe<Scalars['String']['input']>;
};

export type PageSectionFourTextHoverListMutation = {
  Heading1?: InputMaybe<Scalars['String']['input']>;
  Content1?: InputMaybe<Scalars['String']['input']>;
  Heading2?: InputMaybe<Scalars['String']['input']>;
  Content2?: InputMaybe<Scalars['String']['input']>;
  Heading3?: InputMaybe<Scalars['String']['input']>;
  Content3?: InputMaybe<Scalars['String']['input']>;
};

export type PageSectionFourTextMutation = {
  HeadingI?: InputMaybe<Scalars['String']['input']>;
  HeadingII?: InputMaybe<Scalars['String']['input']>;
  HeadingIII?: InputMaybe<Scalars['String']['input']>;
  ImageTopText?: InputMaybe<Scalars['String']['input']>;
  Image?: InputMaybe<Scalars['String']['input']>;
  HoverList?: InputMaybe<PageSectionFourTextHoverListMutation>;
};

export type PageMutation = {
  banner?: InputMaybe<PageBannerMutation>;
  sectionOne?: InputMaybe<PageSectionOneMutation>;
  sectionTwo?: InputMaybe<PageSectionTwoMutation>;
  sectionThreeText?: InputMaybe<PageSectionThreeTextMutation>;
  sectionFourText?: InputMaybe<PageSectionFourTextMutation>;
};

export type PostMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type AboutPartsFragment = { __typename: 'About', header?: { __typename: 'AboutHeader', image?: string | null, label1?: string | null, label2?: string | null, label3?: string | null, label4?: string | null, label5?: string | null, label6?: string | null, label7?: string | null, button?: string | null } | null, heroText?: { __typename: 'AboutHeroText', bannerTitle?: string | null, bannerSpanTitle?: string | null, bannerContent?: string | null } | null, displayinsights?: { __typename: 'AboutDisplayinsights', Headingone?: string | null, Headingtwo?: string | null, insight?: string | null } | null };

export type BlogPartsFragment = { __typename: 'Blog', header?: { __typename: 'BlogHeader', image?: string | null, label1?: string | null, label2?: string | null, label3?: string | null, label4?: string | null, label5?: string | null, label6?: string | null, label7?: string | null, button?: string | null } | null, heroText?: { __typename: 'BlogHeroText', bannerTitle?: string | null, bannerSpanTitle?: string | null, bannerContent?: string | null, bannerButtonText1?: string | null, bannerButtonText2?: string | null, bannerImage?: string | null } | null, horizhover?: { __typename: 'BlogHorizhover', title?: string | null, content?: string | null, image1?: string | null, title1?: string | null, content1?: string | null, image2?: string | null, title2?: string | null, content2?: string | null } | null, sectionThree?: { __typename: 'BlogSectionThree', digital?: string | null, digitalspan?: string | null, digitalcontent?: string | null, title1?: string | null, content1?: string | null, title2?: string | null, content2?: string | null, image?: string | null } | null, displayinsights?: { __typename: 'BlogDisplayinsights', Headingone?: string | null, Headingtwo?: string | null, insight?: string | null } | null };

export type RealtimePartsFragment = { __typename: 'Realtime', header?: { __typename: 'RealtimeHeader', image?: string | null, label1?: string | null, label2?: string | null, label3?: string | null, label4?: string | null, label5?: string | null, label6?: string | null, label7?: string | null, button?: string | null } | null, heroText?: { __typename: 'RealtimeHeroText', bannerTitle?: string | null, bannerSpanTitle?: string | null, bannerContent?: string | null, bannerButtonText1?: string | null, bannerButtonText2?: string | null, bannerImage?: string | null } | null, horizhover?: { __typename: 'RealtimeHorizhover', title?: string | null, content?: string | null, image1?: string | null, title1?: string | null, content1?: string | null, image2?: string | null, title2?: string | null, content2?: string | null } | null, sectionThree?: { __typename: 'RealtimeSectionThree', digital?: string | null, digitalspan?: string | null, digitalcontent?: string | null, title1?: string | null, content1?: string | null, title2?: string | null, content2?: string | null, image?: string | null } | null, displayinsights?: { __typename: 'RealtimeDisplayinsights', Headingone?: string | null, Headingtwo?: string | null, insight?: string | null } | null };

export type PagePartsFragment = { __typename: 'Page', banner?: { __typename: 'PageBanner', bannerTitle?: string | null, bannerSpanTitle?: string | null, bannerSubTitle?: string | null, bannerButtonText?: string | null } | null, sectionOne?: { __typename: 'PageSectionOne', sectionOneText?: string | null, sectionOneImage?: string | null } | null, sectionTwo?: { __typename: 'PageSectionTwo', TableHead1?: string | null, TableHead2?: string | null, TableHead3?: string | null, TableHead4?: string | null, TableBody1?: string | null, TableBody2?: string | null, TableBody3?: string | null, TableBody4?: string | null, TableImage1?: string | null, TableImage2?: string | null, TableImage3?: string | null, TableImage4?: string | null, TableImageAlt?: string | null } | null, sectionThreeText?: { __typename: 'PageSectionThreeText', Heading?: string | null, Content?: string | null, Button?: string | null } | null, sectionFourText?: { __typename: 'PageSectionFourText', HeadingI?: string | null, HeadingII?: string | null, HeadingIII?: string | null, ImageTopText?: string | null, Image?: string | null, HoverList?: { __typename: 'PageSectionFourTextHoverList', Heading1?: string | null, Content1?: string | null, Heading2?: string | null, Content2?: string | null, Heading3?: string | null, Content3?: string | null } | null } | null };

export type PostPartsFragment = { __typename: 'Post', title: string, body?: any | null };

export type AboutQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type AboutQuery = { __typename?: 'Query', about: { __typename: 'About', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, header?: { __typename: 'AboutHeader', image?: string | null, label1?: string | null, label2?: string | null, label3?: string | null, label4?: string | null, label5?: string | null, label6?: string | null, label7?: string | null, button?: string | null } | null, heroText?: { __typename: 'AboutHeroText', bannerTitle?: string | null, bannerSpanTitle?: string | null, bannerContent?: string | null } | null, displayinsights?: { __typename: 'AboutDisplayinsights', Headingone?: string | null, Headingtwo?: string | null, insight?: string | null } | null } };

export type AboutConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<AboutFilter>;
}>;


export type AboutConnectionQuery = { __typename?: 'Query', aboutConnection: { __typename?: 'AboutConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'AboutConnectionEdges', cursor: string, node?: { __typename: 'About', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, header?: { __typename: 'AboutHeader', image?: string | null, label1?: string | null, label2?: string | null, label3?: string | null, label4?: string | null, label5?: string | null, label6?: string | null, label7?: string | null, button?: string | null } | null, heroText?: { __typename: 'AboutHeroText', bannerTitle?: string | null, bannerSpanTitle?: string | null, bannerContent?: string | null } | null, displayinsights?: { __typename: 'AboutDisplayinsights', Headingone?: string | null, Headingtwo?: string | null, insight?: string | null } | null } | null } | null> | null } };

export type BlogQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type BlogQuery = { __typename?: 'Query', blog: { __typename: 'Blog', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, header?: { __typename: 'BlogHeader', image?: string | null, label1?: string | null, label2?: string | null, label3?: string | null, label4?: string | null, label5?: string | null, label6?: string | null, label7?: string | null, button?: string | null } | null, heroText?: { __typename: 'BlogHeroText', bannerTitle?: string | null, bannerSpanTitle?: string | null, bannerContent?: string | null, bannerButtonText1?: string | null, bannerButtonText2?: string | null, bannerImage?: string | null } | null, horizhover?: { __typename: 'BlogHorizhover', title?: string | null, content?: string | null, image1?: string | null, title1?: string | null, content1?: string | null, image2?: string | null, title2?: string | null, content2?: string | null } | null, sectionThree?: { __typename: 'BlogSectionThree', digital?: string | null, digitalspan?: string | null, digitalcontent?: string | null, title1?: string | null, content1?: string | null, title2?: string | null, content2?: string | null, image?: string | null } | null, displayinsights?: { __typename: 'BlogDisplayinsights', Headingone?: string | null, Headingtwo?: string | null, insight?: string | null } | null } };

export type BlogConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<BlogFilter>;
}>;


export type BlogConnectionQuery = { __typename?: 'Query', blogConnection: { __typename?: 'BlogConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'BlogConnectionEdges', cursor: string, node?: { __typename: 'Blog', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, header?: { __typename: 'BlogHeader', image?: string | null, label1?: string | null, label2?: string | null, label3?: string | null, label4?: string | null, label5?: string | null, label6?: string | null, label7?: string | null, button?: string | null } | null, heroText?: { __typename: 'BlogHeroText', bannerTitle?: string | null, bannerSpanTitle?: string | null, bannerContent?: string | null, bannerButtonText1?: string | null, bannerButtonText2?: string | null, bannerImage?: string | null } | null, horizhover?: { __typename: 'BlogHorizhover', title?: string | null, content?: string | null, image1?: string | null, title1?: string | null, content1?: string | null, image2?: string | null, title2?: string | null, content2?: string | null } | null, sectionThree?: { __typename: 'BlogSectionThree', digital?: string | null, digitalspan?: string | null, digitalcontent?: string | null, title1?: string | null, content1?: string | null, title2?: string | null, content2?: string | null, image?: string | null } | null, displayinsights?: { __typename: 'BlogDisplayinsights', Headingone?: string | null, Headingtwo?: string | null, insight?: string | null } | null } | null } | null> | null } };

export type RealtimeQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type RealtimeQuery = { __typename?: 'Query', realtime: { __typename: 'Realtime', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, header?: { __typename: 'RealtimeHeader', image?: string | null, label1?: string | null, label2?: string | null, label3?: string | null, label4?: string | null, label5?: string | null, label6?: string | null, label7?: string | null, button?: string | null } | null, heroText?: { __typename: 'RealtimeHeroText', bannerTitle?: string | null, bannerSpanTitle?: string | null, bannerContent?: string | null, bannerButtonText1?: string | null, bannerButtonText2?: string | null, bannerImage?: string | null } | null, horizhover?: { __typename: 'RealtimeHorizhover', title?: string | null, content?: string | null, image1?: string | null, title1?: string | null, content1?: string | null, image2?: string | null, title2?: string | null, content2?: string | null } | null, sectionThree?: { __typename: 'RealtimeSectionThree', digital?: string | null, digitalspan?: string | null, digitalcontent?: string | null, title1?: string | null, content1?: string | null, title2?: string | null, content2?: string | null, image?: string | null } | null, displayinsights?: { __typename: 'RealtimeDisplayinsights', Headingone?: string | null, Headingtwo?: string | null, insight?: string | null } | null } };

export type RealtimeConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<RealtimeFilter>;
}>;


export type RealtimeConnectionQuery = { __typename?: 'Query', realtimeConnection: { __typename?: 'RealtimeConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'RealtimeConnectionEdges', cursor: string, node?: { __typename: 'Realtime', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, header?: { __typename: 'RealtimeHeader', image?: string | null, label1?: string | null, label2?: string | null, label3?: string | null, label4?: string | null, label5?: string | null, label6?: string | null, label7?: string | null, button?: string | null } | null, heroText?: { __typename: 'RealtimeHeroText', bannerTitle?: string | null, bannerSpanTitle?: string | null, bannerContent?: string | null, bannerButtonText1?: string | null, bannerButtonText2?: string | null, bannerImage?: string | null } | null, horizhover?: { __typename: 'RealtimeHorizhover', title?: string | null, content?: string | null, image1?: string | null, title1?: string | null, content1?: string | null, image2?: string | null, title2?: string | null, content2?: string | null } | null, sectionThree?: { __typename: 'RealtimeSectionThree', digital?: string | null, digitalspan?: string | null, digitalcontent?: string | null, title1?: string | null, content1?: string | null, title2?: string | null, content2?: string | null, image?: string | null } | null, displayinsights?: { __typename: 'RealtimeDisplayinsights', Headingone?: string | null, Headingtwo?: string | null, insight?: string | null } | null } | null } | null> | null } };

export type PageQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type PageQuery = { __typename?: 'Query', page: { __typename: 'Page', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, banner?: { __typename: 'PageBanner', bannerTitle?: string | null, bannerSpanTitle?: string | null, bannerSubTitle?: string | null, bannerButtonText?: string | null } | null, sectionOne?: { __typename: 'PageSectionOne', sectionOneText?: string | null, sectionOneImage?: string | null } | null, sectionTwo?: { __typename: 'PageSectionTwo', TableHead1?: string | null, TableHead2?: string | null, TableHead3?: string | null, TableHead4?: string | null, TableBody1?: string | null, TableBody2?: string | null, TableBody3?: string | null, TableBody4?: string | null, TableImage1?: string | null, TableImage2?: string | null, TableImage3?: string | null, TableImage4?: string | null, TableImageAlt?: string | null } | null, sectionThreeText?: { __typename: 'PageSectionThreeText', Heading?: string | null, Content?: string | null, Button?: string | null } | null, sectionFourText?: { __typename: 'PageSectionFourText', HeadingI?: string | null, HeadingII?: string | null, HeadingIII?: string | null, ImageTopText?: string | null, Image?: string | null, HoverList?: { __typename: 'PageSectionFourTextHoverList', Heading1?: string | null, Content1?: string | null, Heading2?: string | null, Content2?: string | null, Heading3?: string | null, Content3?: string | null } | null } | null } };

export type PageConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PageFilter>;
}>;


export type PageConnectionQuery = { __typename?: 'Query', pageConnection: { __typename?: 'PageConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PageConnectionEdges', cursor: string, node?: { __typename: 'Page', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, banner?: { __typename: 'PageBanner', bannerTitle?: string | null, bannerSpanTitle?: string | null, bannerSubTitle?: string | null, bannerButtonText?: string | null } | null, sectionOne?: { __typename: 'PageSectionOne', sectionOneText?: string | null, sectionOneImage?: string | null } | null, sectionTwo?: { __typename: 'PageSectionTwo', TableHead1?: string | null, TableHead2?: string | null, TableHead3?: string | null, TableHead4?: string | null, TableBody1?: string | null, TableBody2?: string | null, TableBody3?: string | null, TableBody4?: string | null, TableImage1?: string | null, TableImage2?: string | null, TableImage3?: string | null, TableImage4?: string | null, TableImageAlt?: string | null } | null, sectionThreeText?: { __typename: 'PageSectionThreeText', Heading?: string | null, Content?: string | null, Button?: string | null } | null, sectionFourText?: { __typename: 'PageSectionFourText', HeadingI?: string | null, HeadingII?: string | null, HeadingIII?: string | null, ImageTopText?: string | null, Image?: string | null, HoverList?: { __typename: 'PageSectionFourTextHoverList', Heading1?: string | null, Content1?: string | null, Heading2?: string | null, Content2?: string | null, Heading3?: string | null, Content3?: string | null } | null } | null } | null } | null> | null } };

export type PostQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type PostQuery = { __typename?: 'Query', post: { __typename: 'Post', id: string, title: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type PostConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PostFilter>;
}>;


export type PostConnectionQuery = { __typename?: 'Query', postConnection: { __typename?: 'PostConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PostConnectionEdges', cursor: string, node?: { __typename: 'Post', id: string, title: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export const AboutPartsFragmentDoc = gql`
    fragment AboutParts on About {
  __typename
  header {
    __typename
    image
    label1
    label2
    label3
    label4
    label5
    label6
    label7
    button
  }
  heroText {
    __typename
    bannerTitle
    bannerSpanTitle
    bannerContent
  }
  displayinsights {
    __typename
    Headingone
    Headingtwo
    insight
  }
}
    `;
export const BlogPartsFragmentDoc = gql`
    fragment BlogParts on Blog {
  __typename
  header {
    __typename
    image
    label1
    label2
    label3
    label4
    label5
    label6
    label7
    button
  }
  heroText {
    __typename
    bannerTitle
    bannerSpanTitle
    bannerContent
    bannerButtonText1
    bannerButtonText2
    bannerImage
  }
  horizhover {
    __typename
    title
    content
    image1
    title1
    content1
    image2
    title2
    content2
  }
  sectionThree {
    __typename
    digital
    digitalspan
    digitalcontent
    title1
    content1
    title2
    content2
    image
  }
  displayinsights {
    __typename
    Headingone
    Headingtwo
    insight
  }
}
    `;
export const RealtimePartsFragmentDoc = gql`
    fragment RealtimeParts on Realtime {
  __typename
  header {
    __typename
    image
    label1
    label2
    label3
    label4
    label5
    label6
    label7
    button
  }
  heroText {
    __typename
    bannerTitle
    bannerSpanTitle
    bannerContent
    bannerButtonText1
    bannerButtonText2
    bannerImage
  }
  horizhover {
    __typename
    title
    content
    image1
    title1
    content1
    image2
    title2
    content2
  }
  sectionThree {
    __typename
    digital
    digitalspan
    digitalcontent
    title1
    content1
    title2
    content2
    image
  }
  displayinsights {
    __typename
    Headingone
    Headingtwo
    insight
  }
}
    `;
export const PagePartsFragmentDoc = gql`
    fragment PageParts on Page {
  __typename
  banner {
    __typename
    bannerTitle
    bannerSpanTitle
    bannerSubTitle
    bannerButtonText
  }
  sectionOne {
    __typename
    sectionOneText
    sectionOneImage
  }
  sectionTwo {
    __typename
    TableHead1
    TableHead2
    TableHead3
    TableHead4
    TableBody1
    TableBody2
    TableBody3
    TableBody4
    TableImage1
    TableImage2
    TableImage3
    TableImage4
    TableImageAlt
  }
  sectionThreeText {
    __typename
    Heading
    Content
    Button
  }
  sectionFourText {
    __typename
    HeadingI
    HeadingII
    HeadingIII
    ImageTopText
    Image
    HoverList {
      __typename
      Heading1
      Content1
      Heading2
      Content2
      Heading3
      Content3
    }
  }
}
    `;
export const PostPartsFragmentDoc = gql`
    fragment PostParts on Post {
  __typename
  title
  body
}
    `;
export const AboutDocument = gql`
    query about($relativePath: String!) {
  about(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...AboutParts
  }
}
    ${AboutPartsFragmentDoc}`;
export const AboutConnectionDocument = gql`
    query aboutConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: AboutFilter) {
  aboutConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...AboutParts
      }
    }
  }
}
    ${AboutPartsFragmentDoc}`;
export const BlogDocument = gql`
    query blog($relativePath: String!) {
  blog(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...BlogParts
  }
}
    ${BlogPartsFragmentDoc}`;
export const BlogConnectionDocument = gql`
    query blogConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: BlogFilter) {
  blogConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...BlogParts
      }
    }
  }
}
    ${BlogPartsFragmentDoc}`;
export const RealtimeDocument = gql`
    query realtime($relativePath: String!) {
  realtime(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...RealtimeParts
  }
}
    ${RealtimePartsFragmentDoc}`;
export const RealtimeConnectionDocument = gql`
    query realtimeConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: RealtimeFilter) {
  realtimeConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...RealtimeParts
      }
    }
  }
}
    ${RealtimePartsFragmentDoc}`;
export const PageDocument = gql`
    query page($relativePath: String!) {
  page(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PageParts
  }
}
    ${PagePartsFragmentDoc}`;
export const PageConnectionDocument = gql`
    query pageConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PageFilter) {
  pageConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PageParts
      }
    }
  }
}
    ${PagePartsFragmentDoc}`;
export const PostDocument = gql`
    query post($relativePath: String!) {
  post(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PostParts
  }
}
    ${PostPartsFragmentDoc}`;
export const PostConnectionDocument = gql`
    query postConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PostFilter) {
  postConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PostParts
      }
    }
  }
}
    ${PostPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      about(variables: AboutQueryVariables, options?: C): Promise<{data: AboutQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: AboutQueryVariables, query: string}> {
        return requester<{data: AboutQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: AboutQueryVariables, query: string}, AboutQueryVariables>(AboutDocument, variables, options);
      },
    aboutConnection(variables?: AboutConnectionQueryVariables, options?: C): Promise<{data: AboutConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: AboutConnectionQueryVariables, query: string}> {
        return requester<{data: AboutConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: AboutConnectionQueryVariables, query: string}, AboutConnectionQueryVariables>(AboutConnectionDocument, variables, options);
      },
    blog(variables: BlogQueryVariables, options?: C): Promise<{data: BlogQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogQueryVariables, query: string}> {
        return requester<{data: BlogQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogQueryVariables, query: string}, BlogQueryVariables>(BlogDocument, variables, options);
      },
    blogConnection(variables?: BlogConnectionQueryVariables, options?: C): Promise<{data: BlogConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogConnectionQueryVariables, query: string}> {
        return requester<{data: BlogConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogConnectionQueryVariables, query: string}, BlogConnectionQueryVariables>(BlogConnectionDocument, variables, options);
      },
    realtime(variables: RealtimeQueryVariables, options?: C): Promise<{data: RealtimeQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: RealtimeQueryVariables, query: string}> {
        return requester<{data: RealtimeQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: RealtimeQueryVariables, query: string}, RealtimeQueryVariables>(RealtimeDocument, variables, options);
      },
    realtimeConnection(variables?: RealtimeConnectionQueryVariables, options?: C): Promise<{data: RealtimeConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: RealtimeConnectionQueryVariables, query: string}> {
        return requester<{data: RealtimeConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: RealtimeConnectionQueryVariables, query: string}, RealtimeConnectionQueryVariables>(RealtimeConnectionDocument, variables, options);
      },
    page(variables: PageQueryVariables, options?: C): Promise<{data: PageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageQueryVariables, query: string}> {
        return requester<{data: PageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageQueryVariables, query: string}, PageQueryVariables>(PageDocument, variables, options);
      },
    pageConnection(variables?: PageConnectionQueryVariables, options?: C): Promise<{data: PageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageConnectionQueryVariables, query: string}> {
        return requester<{data: PageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageConnectionQueryVariables, query: string}, PageConnectionQueryVariables>(PageConnectionDocument, variables, options);
      },
    post(variables: PostQueryVariables, options?: C): Promise<{data: PostQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PostQueryVariables, query: string}> {
        return requester<{data: PostQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PostQueryVariables, query: string}, PostQueryVariables>(PostDocument, variables, options);
      },
    postConnection(variables?: PostConnectionQueryVariables, options?: C): Promise<{data: PostConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PostConnectionQueryVariables, query: string}> {
        return requester<{data: PostConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PostConnectionQueryVariables, query: string}, PostConnectionQueryVariables>(PostConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: {
      branch?: string,
      /**
       * Aside from `method` and `body`, all fetch options are passed
       * through to underlying fetch request
       */
      fetchOptions?: Omit<Parameters<typeof fetch>[1], 'body' | 'method'>,
    },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    }, options)

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "http://localhost:4001/graphql",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
) => {
  const requester = generateRequester(client)
  return getSdk(requester)
}

  