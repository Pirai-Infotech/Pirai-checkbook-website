# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  about(relativePath: String): About!
  aboutConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: AboutFilter): AboutConnection!
  blog(relativePath: String): Blog!
  blogConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: BlogFilter): BlogConnection!
  realtime(relativePath: String): Realtime!
  realtimeConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: RealtimeFilter): RealtimeConnection!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PageFilter): PageConnection!
  post(relativePath: String): Post!
  postConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PostFilter): PostConnection!
}

input DocumentFilter {
  about: AboutFilter
  blog: BlogFilter
  realtime: RealtimeFilter
  page: PageFilter
  post: PostFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = About | Blog | Realtime | Page | Post | Folder

type AboutHeader {
  image: String
  label1: String
  label2: String
  label3: String
  label4: String
  label5: String
  label6: String
  label7: String
  button: String
}

type AboutHeroText {
  bannerTitle: String
  bannerSpanTitle: String
  bannerContent: String
}

type AboutDisplayinsights {
  Headingone: String
  Headingtwo: String
  insight: String
}

type About implements Node & Document {
  header: AboutHeader
  heroText: AboutHeroText
  displayinsights: AboutDisplayinsights
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input AboutHeaderFilter {
  image: ImageFilter
  label1: StringFilter
  label2: StringFilter
  label3: StringFilter
  label4: StringFilter
  label5: StringFilter
  label6: StringFilter
  label7: StringFilter
  button: StringFilter
}

input AboutHeroTextFilter {
  bannerTitle: StringFilter
  bannerSpanTitle: StringFilter
  bannerContent: StringFilter
}

input AboutDisplayinsightsFilter {
  Headingone: StringFilter
  Headingtwo: StringFilter
  insight: StringFilter
}

input AboutFilter {
  header: AboutHeaderFilter
  heroText: AboutHeroTextFilter
  displayinsights: AboutDisplayinsightsFilter
}

type AboutConnectionEdges {
  cursor: String!
  node: About
}

type AboutConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [AboutConnectionEdges]
}

type BlogHeader {
  image: String
  label1: String
  label2: String
  label3: String
  label4: String
  label5: String
  label6: String
  label7: String
  button: String
}

type BlogHeroText {
  bannerTitle: String
  bannerSpanTitle: String
  bannerContent: String
  bannerButtonText1: String
  bannerButtonText2: String
  bannerImage: String
}

type BlogHorizhover {
  title: String
  content: String
  image1: String
  title1: String
  content1: String
  image2: String
  title2: String
  content2: String
}

type BlogSectionThree {
  digital: String
  digitalspan: String
  digitalcontent: String
  title1: String
  content1: String
  title2: String
  content2: String
  image: String
}

type BlogDisplayinsights {
  Headingone: String
  Headingtwo: String
  insight: String
}

type Blog implements Node & Document {
  header: BlogHeader
  heroText: BlogHeroText
  horizhover: BlogHorizhover
  sectionThree: BlogSectionThree
  displayinsights: BlogDisplayinsights
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input BlogHeaderFilter {
  image: ImageFilter
  label1: StringFilter
  label2: StringFilter
  label3: StringFilter
  label4: StringFilter
  label5: StringFilter
  label6: StringFilter
  label7: StringFilter
  button: StringFilter
}

input BlogHeroTextFilter {
  bannerTitle: StringFilter
  bannerSpanTitle: StringFilter
  bannerContent: StringFilter
  bannerButtonText1: StringFilter
  bannerButtonText2: StringFilter
  bannerImage: ImageFilter
}

input BlogHorizhoverFilter {
  title: StringFilter
  content: StringFilter
  image1: ImageFilter
  title1: StringFilter
  content1: StringFilter
  image2: ImageFilter
  title2: StringFilter
  content2: StringFilter
}

input BlogSectionThreeFilter {
  digital: StringFilter
  digitalspan: StringFilter
  digitalcontent: StringFilter
  title1: StringFilter
  content1: StringFilter
  title2: StringFilter
  content2: StringFilter
  image: ImageFilter
}

input BlogDisplayinsightsFilter {
  Headingone: StringFilter
  Headingtwo: StringFilter
  insight: StringFilter
}

input BlogFilter {
  header: BlogHeaderFilter
  heroText: BlogHeroTextFilter
  horizhover: BlogHorizhoverFilter
  sectionThree: BlogSectionThreeFilter
  displayinsights: BlogDisplayinsightsFilter
}

type BlogConnectionEdges {
  cursor: String!
  node: Blog
}

type BlogConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [BlogConnectionEdges]
}

type RealtimeHeader {
  image: String
  label1: String
  label2: String
  label3: String
  label4: String
  label5: String
  label6: String
  label7: String
  button: String
}

type RealtimeHeroText {
  bannerTitle: String
  bannerSpanTitle: String
  bannerContent: String
  bannerButtonText1: String
  bannerButtonText2: String
  bannerImage: String
}

type RealtimeHorizhover {
  title: String
  content: String
  image1: String
  title1: String
  content1: String
  image2: String
  title2: String
  content2: String
}

type RealtimeSectionThree {
  digital: String
  digitalspan: String
  digitalcontent: String
  title1: String
  content1: String
  title2: String
  content2: String
  image: String
}

type RealtimeDisplayinsights {
  Headingone: String
  Headingtwo: String
  insight: String
}

type Realtime implements Node & Document {
  header: RealtimeHeader
  heroText: RealtimeHeroText
  horizhover: RealtimeHorizhover
  sectionThree: RealtimeSectionThree
  displayinsights: RealtimeDisplayinsights
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input RealtimeHeaderFilter {
  image: ImageFilter
  label1: StringFilter
  label2: StringFilter
  label3: StringFilter
  label4: StringFilter
  label5: StringFilter
  label6: StringFilter
  label7: StringFilter
  button: StringFilter
}

input RealtimeHeroTextFilter {
  bannerTitle: StringFilter
  bannerSpanTitle: StringFilter
  bannerContent: StringFilter
  bannerButtonText1: StringFilter
  bannerButtonText2: StringFilter
  bannerImage: ImageFilter
}

input RealtimeHorizhoverFilter {
  title: StringFilter
  content: StringFilter
  image1: ImageFilter
  title1: StringFilter
  content1: StringFilter
  image2: ImageFilter
  title2: StringFilter
  content2: StringFilter
}

input RealtimeSectionThreeFilter {
  digital: StringFilter
  digitalspan: StringFilter
  digitalcontent: StringFilter
  title1: StringFilter
  content1: StringFilter
  title2: StringFilter
  content2: StringFilter
  image: ImageFilter
}

input RealtimeDisplayinsightsFilter {
  Headingone: StringFilter
  Headingtwo: StringFilter
  insight: StringFilter
}

input RealtimeFilter {
  header: RealtimeHeaderFilter
  heroText: RealtimeHeroTextFilter
  horizhover: RealtimeHorizhoverFilter
  sectionThree: RealtimeSectionThreeFilter
  displayinsights: RealtimeDisplayinsightsFilter
}

type RealtimeConnectionEdges {
  cursor: String!
  node: Realtime
}

type RealtimeConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [RealtimeConnectionEdges]
}

type PageBanner {
  bannerTitle: String
  bannerSpanTitle: String
  bannerSubTitle: String
  bannerButtonText: String
}

type PageSectionOne {
  sectionOneText: String
  sectionOneImage: String
}

type PageSectionTwo {
  TableHead1: String
  TableHead2: String
  TableHead3: String
  TableHead4: String
  TableBody1: String
  TableBody2: String
  TableBody3: String
  TableBody4: String
  TableImage1: String
  TableImage2: String
  TableImage3: String
  TableImage4: String
  TableImageAlt: String
}

type PageSectionThreeText {
  Heading: String
  Content: String
  Button: String
}

type PageSectionFourTextHoverList {
  Heading1: String
  Content1: String
  Heading2: String
  Content2: String
  Heading3: String
  Content3: String
}

type PageSectionFourText {
  HeadingI: String
  HeadingII: String
  HeadingIII: String
  ImageTopText: String
  Image: String
  HoverList: PageSectionFourTextHoverList
}

type Page implements Node & Document {
  banner: PageBanner
  sectionOne: PageSectionOne
  sectionTwo: PageSectionTwo
  sectionThreeText: PageSectionThreeText
  sectionFourText: PageSectionFourText
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input PageBannerFilter {
  bannerTitle: StringFilter
  bannerSpanTitle: StringFilter
  bannerSubTitle: StringFilter
  bannerButtonText: StringFilter
}

input PageSectionOneFilter {
  sectionOneText: StringFilter
  sectionOneImage: ImageFilter
}

input PageSectionTwoFilter {
  TableHead1: StringFilter
  TableHead2: StringFilter
  TableHead3: StringFilter
  TableHead4: StringFilter
  TableBody1: StringFilter
  TableBody2: StringFilter
  TableBody3: StringFilter
  TableBody4: StringFilter
  TableImage1: ImageFilter
  TableImage2: ImageFilter
  TableImage3: ImageFilter
  TableImage4: ImageFilter
  TableImageAlt: StringFilter
}

input PageSectionThreeTextFilter {
  Heading: StringFilter
  Content: StringFilter
  Button: StringFilter
}

input PageSectionFourTextHoverListFilter {
  Heading1: StringFilter
  Content1: StringFilter
  Heading2: StringFilter
  Content2: StringFilter
  Heading3: StringFilter
  Content3: StringFilter
}

input PageSectionFourTextFilter {
  HeadingI: StringFilter
  HeadingII: StringFilter
  HeadingIII: StringFilter
  ImageTopText: StringFilter
  Image: ImageFilter
  HoverList: PageSectionFourTextHoverListFilter
}

input PageFilter {
  banner: PageBannerFilter
  sectionOne: PageSectionOneFilter
  sectionTwo: PageSectionTwoFilter
  sectionThreeText: PageSectionThreeTextFilter
  sectionFourText: PageSectionFourTextFilter
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

type Post implements Node & Document {
  title: String!
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input PostFilter {
  title: StringFilter
  body: RichTextFilter
}

type PostConnectionEdges {
  cursor: String!
  node: Post
}

type PostConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateAbout(relativePath: String!, params: AboutMutation!): About!
  createAbout(relativePath: String!, params: AboutMutation!): About!
  updateBlog(relativePath: String!, params: BlogMutation!): Blog!
  createBlog(relativePath: String!, params: BlogMutation!): Blog!
  updateRealtime(relativePath: String!, params: RealtimeMutation!): Realtime!
  createRealtime(relativePath: String!, params: RealtimeMutation!): Realtime!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
  updatePost(relativePath: String!, params: PostMutation!): Post!
  createPost(relativePath: String!, params: PostMutation!): Post!
}

input DocumentUpdateMutation {
  about: AboutMutation
  blog: BlogMutation
  realtime: RealtimeMutation
  page: PageMutation
  post: PostMutation
  relativePath: String
}

input DocumentMutation {
  about: AboutMutation
  blog: BlogMutation
  realtime: RealtimeMutation
  page: PageMutation
  post: PostMutation
}

input AboutHeaderMutation {
  image: String
  label1: String
  label2: String
  label3: String
  label4: String
  label5: String
  label6: String
  label7: String
  button: String
}

input AboutHeroTextMutation {
  bannerTitle: String
  bannerSpanTitle: String
  bannerContent: String
}

input AboutDisplayinsightsMutation {
  Headingone: String
  Headingtwo: String
  insight: String
}

input AboutMutation {
  header: AboutHeaderMutation
  heroText: AboutHeroTextMutation
  displayinsights: AboutDisplayinsightsMutation
}

input BlogHeaderMutation {
  image: String
  label1: String
  label2: String
  label3: String
  label4: String
  label5: String
  label6: String
  label7: String
  button: String
}

input BlogHeroTextMutation {
  bannerTitle: String
  bannerSpanTitle: String
  bannerContent: String
  bannerButtonText1: String
  bannerButtonText2: String
  bannerImage: String
}

input BlogHorizhoverMutation {
  title: String
  content: String
  image1: String
  title1: String
  content1: String
  image2: String
  title2: String
  content2: String
}

input BlogSectionThreeMutation {
  digital: String
  digitalspan: String
  digitalcontent: String
  title1: String
  content1: String
  title2: String
  content2: String
  image: String
}

input BlogDisplayinsightsMutation {
  Headingone: String
  Headingtwo: String
  insight: String
}

input BlogMutation {
  header: BlogHeaderMutation
  heroText: BlogHeroTextMutation
  horizhover: BlogHorizhoverMutation
  sectionThree: BlogSectionThreeMutation
  displayinsights: BlogDisplayinsightsMutation
}

input RealtimeHeaderMutation {
  image: String
  label1: String
  label2: String
  label3: String
  label4: String
  label5: String
  label6: String
  label7: String
  button: String
}

input RealtimeHeroTextMutation {
  bannerTitle: String
  bannerSpanTitle: String
  bannerContent: String
  bannerButtonText1: String
  bannerButtonText2: String
  bannerImage: String
}

input RealtimeHorizhoverMutation {
  title: String
  content: String
  image1: String
  title1: String
  content1: String
  image2: String
  title2: String
  content2: String
}

input RealtimeSectionThreeMutation {
  digital: String
  digitalspan: String
  digitalcontent: String
  title1: String
  content1: String
  title2: String
  content2: String
  image: String
}

input RealtimeDisplayinsightsMutation {
  Headingone: String
  Headingtwo: String
  insight: String
}

input RealtimeMutation {
  header: RealtimeHeaderMutation
  heroText: RealtimeHeroTextMutation
  horizhover: RealtimeHorizhoverMutation
  sectionThree: RealtimeSectionThreeMutation
  displayinsights: RealtimeDisplayinsightsMutation
}

input PageBannerMutation {
  bannerTitle: String
  bannerSpanTitle: String
  bannerSubTitle: String
  bannerButtonText: String
}

input PageSectionOneMutation {
  sectionOneText: String
  sectionOneImage: String
}

input PageSectionTwoMutation {
  TableHead1: String
  TableHead2: String
  TableHead3: String
  TableHead4: String
  TableBody1: String
  TableBody2: String
  TableBody3: String
  TableBody4: String
  TableImage1: String
  TableImage2: String
  TableImage3: String
  TableImage4: String
  TableImageAlt: String
}

input PageSectionThreeTextMutation {
  Heading: String
  Content: String
  Button: String
}

input PageSectionFourTextHoverListMutation {
  Heading1: String
  Content1: String
  Heading2: String
  Content2: String
  Heading3: String
  Content3: String
}

input PageSectionFourTextMutation {
  HeadingI: String
  HeadingII: String
  HeadingIII: String
  ImageTopText: String
  Image: String
  HoverList: PageSectionFourTextHoverListMutation
}

input PageMutation {
  banner: PageBannerMutation
  sectionOne: PageSectionOneMutation
  sectionTwo: PageSectionTwoMutation
  sectionThreeText: PageSectionThreeTextMutation
  sectionFourText: PageSectionFourTextMutation
}

input PostMutation {
  title: String
  body: JSON
}

schema {
  query: Query
  mutation: Mutation
}
